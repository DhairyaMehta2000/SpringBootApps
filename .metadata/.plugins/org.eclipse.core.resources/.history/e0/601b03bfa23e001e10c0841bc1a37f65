package game;

import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

import entities.Board;
import entities.Move;
import entities.Piece;
import entities.Player;

public class Game {

	private Board board;
	private Move move;
	private Deque<Player> players;

	public Game(Board board, Player player1, Player player2) {
		super();
		this.board = board;
		this.players = new LinkedList<>();
		players.add(player1);
		players.add(player2);
		players.forEach(player->System.out.println(player.getName()));
	}

	public void initGame() {
		board.intiBoard();
		System.out.println("Cuurent board status : ");
		board.printBoard();
		
	}

	public boolean validMove(Move newMove, int row, int col, Player currentPlayer) {
		if (row >= 0 && col >= 0 && row<board.getSize() && col<board.getSize() && board.getBoard()[row][col] == ' ') {
			board.getBoard()[row][col] = currentPlayer.getPiece();
//			board.setBoard(move);
			return true;
		} else {
			return false;
		}
	}

	public boolean isThereWinner(Move move, int row, int col, Player currentPlayer) {

		for (int i = 0; i < board.getSize(); i++) {
			if (board.getBoard()[row][i] != currentPlayer.getPiece()) {
				return false;
			}
		}

		for (int i = 0; i < board.getSize(); i++) {
			if (board.getBoard()[i][col] != currentPlayer.getPiece()) {
				return false;
			}
		}

		for (int i = 0, j = 0; i < board.getSize(); i++, j++) {
			if (board.getBoard()[i][j] != currentPlayer.getPiece()) {
				return false;
			}
		}

		for (int i = board.getSize() - 1, j = 0; i >= 0; i--, j++) {
			if (board.getBoard()[i][j] != currentPlayer.getPiece()) {
				return false;
			}
		}
		return true;
	}

	public boolean isThereDraw(Move move, int row, int col) {
		for (int i = 0; i < board.getSize(); i++) {
			for (int j = 0; j < board.getSize(); j++) {
				if (board.getBoard()[i][j] == ' ') {
					return false;
				}
			}
		}
		return true;
	}

	public void play() {

		Scanner sc = new Scanner(System.in);

		while (true) {
			Player currentPlayer = players.poll();
			System.out.println("It is " + currentPlayer.getName() + "'s turn"); 
			board.printBoard();
			System.out.println("Enter the row you want to play in ");
			int row = sc.nextInt();
			
			System.out.println("Enter the col you want to play in ");
			int col = sc.nextInt();
			
			Move newMove = new Move(currentPlayer, row, col);
			
			if (validMove(newMove, row, col,currentPlayer)) {
				if (isThereWinner(newMove,row,col,currentPlayer)) {
					System.out.println("Winner is " + currentPlayer.getName());
				}else {
					if(isThereDraw(newMove,row,col)){
						System.out.println("Its a draw");
					}
				}
			} else {
				System.out.println("Invalid move try again");
				players.offer(currentPlayer);
			}
			
			players.offer(currentPlayer);
			
		}
	}

}
