	package elevator;
	
	import java.util.PriorityQueue;
	
	import enums.Direction;
	import enums.Location;
	import request.ExternalRequest;
	import request.InternalRequest;
	import request.Request;
	
	public class ElevatorService implements Elevator {
	
		private int currentFloor;
		private PriorityQueue<InternalRequest> upQueue;
		private PriorityQueue<InternalRequest> downQueue;
	
		public ElevatorService(int currentFloor) {
			this.currentFloor = currentFloor;
			upQueue = new PriorityQueue<>((a, b) -> a.destinationFloor - b.destinationFloor);
			downQueue = new PriorityQueue<>((a, b) -> b.destinationFloor - a.destinationFloor);
	
		}
	
		@Override
		public void run() {
			while (!upQueue.isEmpty() || !downQueue.isEmpty()) {
	//			System.out.println(upQueue.size());
				processUpRequests();
				processDownRequests();
			}
	
		}
	
		@Override
		public void processUpRequests() {
			while (!upQueue.isEmpty()) {
	
				InternalRequest currentRequest = upQueue.poll();
				System.out.println(
						"Served a up request from " + this.currentFloor + " to " + currentRequest.destinationFloor);
				this.currentFloor = currentRequest.destinationFloor;
			}
	
		}
	
		@Override
		public void processDownRequests() {
			while (!downQueue.isEmpty()) {
				InternalRequest currentRequest = downQueue.poll();
				System.out.println(
						"Served a down request from " + this.currentFloor + " to " + currentRequest.destinationFloor);
				this.currentFloor = currentRequest.destinationFloor;
			}
	
		}
	
//		@Override
		
	
		
		

		public int getCurrentFloor() {
			return currentFloor;
		}

		public void setCurrentFloor(int currentFloor) {
			this.currentFloor = currentFloor;
		}
	
		
	
	}
