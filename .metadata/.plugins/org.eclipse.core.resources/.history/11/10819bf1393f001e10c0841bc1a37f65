package services;

import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

import interfaces.Board;
import interfaces.Dice;
import interfaces.GameLogic;
import interfaces.Ladder;
import interfaces.Move;
import interfaces.Player;
import interfaces.Snake;

public class GameService implements GameLogic {

	private Board board;
	private Ladder ladder;
	private Snake snake;
	private Deque<Player> players;
	private Dice dice;

	public GameService(Board board, Player player1, Player player2, Ladder ladder, Snake snake, Dice dice) {
		this.board = board;
		this.ladder = ladder;
		this.snake = snake;
		this.players = new LinkedList<>();
		players.add(player1);
		players.add(player2);
		this.dice = dice;
	}

	@Override
	public void init() {
		System.out.println(board.getBoard());
	}

	@Override
	public void play() {
		Scanner sc = new Scanner(System.in);

		while (true) {
			Player currentPlayer = players.poll();
			int roll = dice.rollDice();
//			currentPlayer.setPosition(currentPlayer.getPosition()+roll);

			Move move = new MoveService(currentPlayer, currentPlayer.getPosition(), roll);

			if (makeMove(move)) {
				for (int i = 0; i < ladder.getLadders().size(); i++) {
					if (currentPlayer.getPosition() == ladder.getLadders().get(i)) {
						ladder.promote(currentPlayer);
					}
				}
				for (int i = 0; i < snake.getSnakes().size(); i++) {
					if (currentPlayer.getPosition() == snake.getSnakes().get(i)) {
						snake.demote(currentPlayer);
					}
				}
				if (isThereWinner(currentPlayer)) {
					System.out.println("Player " + currentPlayer.getName() + " wins");
					break;
				}
			} else {
				System.out.println("Invalid move try next time ");
				players.addLast(currentPlayer);
			}

//			for(int i=0;i<ladder.get)
		}

	}

	@Override
	public boolean makeMove(Move move) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	public boolean isThereWinner(Player player) {
		// TODO Auto-generated method stub
		return false;
	}

}
