package services;

import java.util.Deque;
import java.util.LinkedList;
import java.util.Scanner;

public class GameService implements GameLogic {

	Deque<Player> players;
	Board board;

	public GameService(Player player1, Player player2, Board board) {
		this.players = new LinkedList<>();
		players.add(player1);
		players.add(player2);
		this.board = board;
	}

	@Override
	public void initGame(Board board, Player player1, Player player2) {
		board.initBoard();
	}

	@Override
	public boolean isThereWinner(Move move, Player currentPlayer, int row, int col) {
		boolean rowFlag = true;
		boolean colFlag = true;
		boolean diagFlag = true;
		boolean antiDiagFlag = true;

		for (int i = 0; i < board.getSize(); i++) {
			if (board.getBoard()[i][row] != currentPlayer.getSymbol()) {
				rowFlag = false;
			}
		}

		for (int i = 0; i < board.getSize(); i++) {
			if (board.getBoard()[col][i] != currentPlayer.getSymbol()) {
				colFlag = false;
			}
		}

		for (int i = 0, j = 0; i < board.getSize() - 1; i++, j++) {
			if (board.getBoard()[i][j] != currentPlayer.getSymbol()) {
				diagFlag = false;
			}
		}

		for (int i = board.getSize() - 1, j = 0; i >= 0; i--, j++) {
			if (board.getBoard()[i][j] != currentPlayer.getSymbol()) {
				antiDiagFlag = false;
			}
		}

		return rowFlag || colFlag || diagFlag || antiDiagFlag;
	}

	@Override
	public boolean isThereDraw() {
		for (int i = 0; i < board.getSize(); i++) {
			for (int j = 0; j < board.getSize(); j++) {
				if (board.getBoard()[i][j] != " ") {
					return false;
				}
			}
		}
		return true;

	}

	@Override
	public boolean makeMove(Move move, Player player, int row, int col) {
		if (isValidMove(row, col)) {
			board.getBoard()[row][col] = player.getSymbol();
			return true;
		} else {
			return false;
		}

	}

	@Override
	public boolean isValidMove(int row, int col) {
		if (row >= 0 && col >= 0 && row < board.getSize() && col < board.getSize()
				&& board.getBoard()[row][col] == " ") {
			return true;
		} else {
			return false;
		}

	}

	@Override
	public void play() {
		Scanner sc = new Scanner(System.in);
		while (true) {
			board.displayBoard();
			Player currentPlayer = players.poll();
			System.out.println("Current player is " + currentPlayer.getName());
			System.out.println("Enter the row you want to play in ");
			int row = sc.nextInt();
			System.out.println("Enter the column you want to play in ");
			int col = sc.nextInt();

			Move move = new MoveService(currentPlayer, row, col);
			if (makeMove(move, currentPlayer, row, col)) {
				if (isThereWinner(move, currentPlayer, row, col)) {
					System.out.println("Winner is " + currentPlayer.getName());
					board.displayBoard();
					break;
				} else if (isThereDraw()) {
					System.out.println("Its a draw");
					board.displayBoard();
				}
			} else {
				System.out.println("Invalid Move... please try again ");
				players.offerFirst(currentPlayer);
			}
			players.offer(currentPlayer);
			board.displayBoard();

		}

	}

}
