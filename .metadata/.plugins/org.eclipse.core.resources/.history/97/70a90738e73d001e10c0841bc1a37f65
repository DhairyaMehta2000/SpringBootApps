package elevator;

import request.InternalRequest;
import request.Request;
import java.util.*;

import enums.Direction;
import enums.Location;
public class ElevatorControlSystem {
	private Elevator elevator;
	private PriorityQueue<Request>upQueue;
	private PriorityQueue<Request> downQueue;
	
	
	public ElevatorControlSystem(Elevator elevator) {
		this.elevator = elevator;
		this.upQueue = new PriorityQueue<>((a,b)->a.getDestinationFloor()-b.getDestinationFloor());
		this.downQueue = new PriorityQueue<>((a,b)->b.getDestinationFloor()-a.getDestinationFloor());
	}
	
//	@Override
	public void sendDownRequest(Request request) {
		if (request.getLocation() == Location.OUTSIDE && elevator.getCurrentFloor() != request.getCurrentFloor()) {
			downQueue.offer(
					new InternalRequest(Direction.UP, Location.OUTSIDE, elevator.getCurrentFloor(), request.getCurrentFloor()));

		} else if (request.getLocation() == Location.INSIDE) {
			downQueue.offer(new InternalRequest(request.getDirection(), request.getLocation(), request.getCurrentFloor(),
					request.getDestinationFloor()));
		}
	}
	
	public void sendUpRequest(Request request) {
		if (request.getLocation() == Location.OUTSIDE && elevator.getCurrentFloor() != request.getCurrentFloor()) {
			upQueue.offer(
					new InternalRequest(Direction.UP, Location.OUTSIDE, elevator.getCurrentFloor(), request.getCurrentFloor()));

		} else if (request.getLocation() == Location.INSIDE) {
			upQueue.offer(new InternalRequest(request.getDirection(), request.getLocation(), request.getCurrentFloor(),
					request.getDestinationFloor()));
		}

	}
	
	public Elevator getElevator() {
		return elevator;
	}

	public void setElevator(Elevator elevator) {
		this.elevator = elevator;
	}

	public PriorityQueue<Request> getUpQueue() {
		return upQueue;
	}

	public void setUpQueue(PriorityQueue<Request> upQueue) {
		this.upQueue = upQueue;
	}

	public PriorityQueue<Request> getDownQueue() {
		return downQueue;
	}

	public void setDownQueue(PriorityQueue<Request> downQueue) {
		this.downQueue = downQueue;
	}

	public void addRequests() {
		elevator.addRequests();
		
	}
	
	public void run() {
		elevator.run();
	}
}
